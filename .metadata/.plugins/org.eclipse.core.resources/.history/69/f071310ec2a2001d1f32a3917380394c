package com.it;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

public class Main {
    public static void main(String[] args) throws IOException {
        // Make a REST API call to the URL
        URL url = new URL("https://cloudfinch-public.s3.ap-south-1.amazonaws.com/countries.json");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder response = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();
        connection.disconnect();
        
        // Save the response into a JSON Object
        JSONArray countriesArray = new JSONArray(response.toString());
        
        // Identify the name, region, and area values of each country
        Map<String, List<Country>> regionToCountries = new HashMap<>();
        for (int i = 0; i < countriesArray.length(); i++) {
            JSONObject countryObject = countriesArray.getJSONObject(i);
            String name = countryObject.getString("name");
            String region = countryObject.getString("region");
            double area = countryObject.getDouble("area");
            Country country = new Country(name, region, area);
            List<Country> countries = regionToCountries.get(region);
            if (countries == null) {
                countries = new ArrayList<>();
                regionToCountries.put(region, countries);
            }
            countries.add(country);
        }
        
        // Print the top 5 largest countries with the largest land mass in each of the continents
        for (Map.Entry<String, List<Country>> entry : regionToCountries.entrySet()) {
            System.out.println("Top 5 largest countries in " + entry.getKey());
            List<Country> countries = entry.getValue();
            countries.sort(Comparator.comparing(Country::getArea).reversed());
            for (int i = 0; i < Math.min(5, countries.size()); i++) {
                Country country = countries.get(i);
                System.out.println("- " + country.getName() + ": " + country.getArea() + " sq km");
            }
        }
    }
}
